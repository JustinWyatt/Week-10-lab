@model IEnumerable<Week_10_Lab.Models.Pin>

@{
    ViewBag.Title = "Pinterest";
}

<h2>Pinterest</h2>

<div ng-app="app">
    <div ng-controller="pinController">
        <form>
            <input type="text" placeholder="Type Url" ng-model="newPin.url" />
            <input type="text" placeholder="Type Image" ng-model="newPin.imagepath" />
            <input type="submit" value="Submit" ng-click="makeUpload(newPin)" />
        </form>
        <div ng-repeat="p in pinList">
            <div><a href="{{p.Url}}"><img ng-src="{{p.ImagePath}}" /></a></div>
        </div>
        <p data-toggle="modal" data-target="#SignIn">SignIn</p>

        <!-- Sign In Modal -->
        <div class="modal fade" id="SignIn" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Sign In</h4>
                    </div>
                    <div class="modal-body">
                        <form class="form-login" role="form">
                            <h2 class="form-login-heading">Login</h2>
                            <input type="text" class="form-control" placeholder="Username" data-ng-model="loginData.userName" required autofocus>
                            <input type="password" class="form-control" placeholder="Password" data-ng-model="loginData.password" required>
                            <button class="btn btn-lg btn-info btn-block" type="submit" data-ng-click="login()">Login</button>
                            <div data-ng-hide="message == ''" class="alert alert-danger">
                                {{message}}
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <p data-dismiss="modal" data-toggle="modal" data-target="#Register">Register</p>
                        <p data-dismiss="modal">Close</p>
                    </div>
                </div>

            </div>
        </div>

        <!-- Register Modal -->
        <div class="modal fade" id="Register" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Sign In</h4>
                    </div>
                    <div class="modal-body">
                        <form class="form-login" role="form">
                            <h2 class="form-login-heading">Sign up</h2>
                            <input type="text" class="form-control" placeholder="Username" data-ng-model="registration.userName" required autofocus>
                            <input type="password" class="form-control" placeholder="Password" data-ng-model="registration.password" required>
                            <input type="password" class="form-control" placeholder="Confirm Password" data-ng-model="registration.confirmPassword" required>
                            <button class="btn btn-lg btn-info btn-block" type="submit" data-ng-click="signUp()">Submit</button>
                            <div data-ng-hide="message == ''" data-ng-class="(savedSuccessfully) ? 'alert alert-success' : 'alert alert-danger'">
                                {{message}}
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <p data-dismiss="modal" data-toggle="modal" data-target="#SignIn">SignIn</p>
                        <p data-dismiss="modal">Close</p>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@*@foreach (var item in Model)
    {
        <div id="pinterest-post">
            <a href="#@item.Url "><img src="@item.ImagePath" /></a>
        </div>

    }*@

@section scripts{

    <script>
        var app = angular.module("app", []);

        app.run(['authService', function (authService) {
            authService.fillAuthData();
        }]);

        app.config(function ($httpProvider) {
            $httpProvider.interceptors.push('authInterceptorService');
        });

        app.factory('factory', function ($http, $q, $location, localStorageService) {
            var factory = {};

            factory.getPins = function () {
                return $http.get('/home/getpins').then(function (response) {
                    console.log(response);
                    return response.data;
                }, function (response) {
                    console.log(response);
                });
            }

            factory.uploadPin = function (pin) {
                return $http.post('/home/uploadpin', pin).then(function (response) {
                    return response.data;
                });
            }

            factory.authService = function ($http, $q, localStorageService) {

                var serviceBase = 'http://localhost:61051/';
                var authServiceFactory = {};

                var _authentication = {
                    isAuth: false,
                    userName : ""
                };

                var _saveRegistration = function (registration) {

                    _logOut();

                    return $http.post(serviceBase + 'api/account/register', registration).then(function (response) {
                        return response;
                    });

                };

                var _login = function (loginData) {

                    var data = "grant_type=password&username=" + loginData.userName + "&password=" + loginData.password;

                    var deferred = $q.defer();

                    $http.post(serviceBase + 'token', data, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }).success(function (response) {

                        localStorageService.set('authorizationData', { token: response.access_token, userName: loginData.userName });

                        _authentication.isAuth = true;
                        _authentication.userName = loginData.userName;

                        deferred.resolve(response);

                    }).error(function (err, status) {
                        _logOut();
                        deferred.reject(err);
                    });

                    return deferred.promise;

                };

                var _logOut = function () {

                    localStorageService.remove('authorizationData');

                    _authentication.isAuth = false;
                    _authentication.userName = "";

                };

                var _fillAuthData = function () {

                    var authData = localStorageService.get('authorizationData');
                    if (authData)
                    {
                        _authentication.isAuth = true;
                        _authentication.userName = authData.userName;
                    }

                }

                authServiceFactory.saveRegistration = _saveRegistration;
                authServiceFactory.login = _login;
                authServiceFactory.logOut = _logOut;
                authServiceFactory.fillAuthData = _fillAuthData;
                authServiceFactory.authentication = _authentication;

                return authServiceFactory;
            };

            factory.getPins = function ($http) {

                var serviceBase = 'http://localhost:61051/';
                var getPinsFactory = {};

                var _getPins = function () {

                    return $http.get(serviceBase + 'api/getpins/:id').then(function (results) {
                        return results;
                    });
                };

                getPinsFactory.getPins = _getPins;

                return getPinsFactory;
            }

            factory.authInterceptorService = function ($q, $location, localStorageService) {

                var authInterceptorServiceFactory = {};

                var _request = function (config) {

                    config.headers = config.headers || {};

                    var authData = localStorageService.get('authorizationData');
                    if (authData) {
                        config.headers.Authorization = 'Bearer ' + authData.token;
                    }

                    return config;
                }

                var _responseError = function (rejection) {
                    if (rejection.status === 401) {
                        $location.path('/login');
                    }
                    return $q.reject(rejection);
                }

                authInterceptorServiceFactory.request = _request;
                authInterceptorServiceFactory.responseError = _responseError;

                return authInterceptorServiceFactory;
            };

            return factory;
        });

        app.controller('controller', function () {

            var controller = {};

            controller.pinController = function ($scope, factory) {

                $scope.pinList = [];

                var init = function () {
                    factory.getPins().then(function (results) {
                        $scope.pinList = results;
                    });
                };

                init();

                $scope.makeUpload = function (newPin) {
                    factory.uploadPin(newPin).then(function (result) {
                        $scope.pinList.unshift(result);
                        console.log(result);
                    });
                }
            };

            controller.signupController = function ($scope, $location, $timeout, authService) {

                $scope.savedSuccessfully = false;

                $scope.message = "";

                $scope.registration = {
                    userName: "",
                    password: "",
                    confirmPassword: ""
                };

                $scope.signUp = function () {

                    authService.saveRegistration($scope.registration).then(function (response) {

                        $scope.savedSuccessfully = true;
                        $scope.message = "User has been registered successfully, you will be redicted to login page in 2 seconds.";
                        startTimer();

                    },
                     function (response) {
                         var errors = [];
                         for (var key in response.data.modelState) {
                             for (var i = 0; i < response.data.modelState[key].length; i++) {
                                 errors.push(response.data.modelState[key][i]);
                             }
                         }
                         $scope.message = "Failed to register user due to:" + errors.join(' ');
                     });
                };

                var startTimer = function () {
                    var timer = $timeout(function () {
                        $timeout.cancel(timer);
                        $location.path('/login');
                    }, 2000);
                };

            };

            controller.loginController = function ($scope, $location, authService) {

                $scope.loginData = {
                    userName: "",
                    password: ""
                };

                $scope.message = "";

                $scope.login = function () {

                    authService.login($scope.loginData).then(function (response) {

                        $location.path('/orders');

                    },
                     function (err) {
                         $scope.message = err.error_description;
                     });
                };

                controller.indexController;

                return controller;

            };

            controller.indexController = function ($scope, $location, authService) {

                $scope.logOut = function () {
                    authService.logOut();
                    $location.path('/home');
                }

                $scope.authentication = authService.authentication;
            };

        });
    </script>
}